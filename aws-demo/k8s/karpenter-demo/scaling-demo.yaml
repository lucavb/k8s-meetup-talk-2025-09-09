apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpu-workload-simulator
  namespace: default
  labels:
    app: cpu-workload-simulator
    demo: "karpenter-scaling"
spec:
  # Start with 0 replicas - we'll scale this up during the demo
  replicas: 0
  selector:
    matchLabels:
      app: cpu-workload-simulator
  template:
    metadata:
      labels:
        app: cpu-workload-simulator
        demo: "karpenter-scaling"
    spec:
      containers:
      - name: cpu-simulator
        image: ubuntu:20.04
        imagePullPolicy: Always
        
        command: ["/bin/bash"]
        args:
          - -c
          - |
            echo "üöÄ CPU Workload Simulator Started"
            echo "Node: $NODE_NAME"
            echo "Pod: $POD_NAME"
            echo "CPU Limit: $CPU_LIMIT"
            
            # Install monitoring tools
            apt-get update -qq && apt-get install -y -qq python3 python3-pip htop stress-ng
            pip3 install -q psutil
            
            # CPU utilization script
            cat << 'EOF' > /tmp/cpu_load.py
            import subprocess
            import time
            import os
            import random
            import signal
            import sys
            import psutil
            
            def signal_handler(sig, frame):
                print('\nüõë Shutting down gracefully...')
                sys.exit(0)
            
            signal.signal(signal.SIGTERM, signal_handler)
            signal.signal(signal.SIGINT, signal_handler)
            
            print("üöÄ Starting CPU workload simulation...")
            print(f"Running on: {os.environ.get('NODE_NAME', 'unknown-node')}")
            print(f"CPU cores available: {psutil.cpu_count()}")
            
            # Simulate varying CPU workload
            iteration = 0
            while True:
                try:
                    iteration += 1
                    
                    # Vary load intensity (simulate real workloads)
                    if iteration % 20 == 0:
                        load_type = "high"
                        duration = random.randint(15, 25)
                        cpu_workers = psutil.cpu_count()
                    elif iteration % 8 == 0:
                        load_type = "medium" 
                        duration = random.randint(10, 15)
                        cpu_workers = max(1, psutil.cpu_count() // 2)
                    else:
                        load_type = "light"
                        duration = random.randint(5, 10)
                        cpu_workers = 1
                    
                    print(f"üî• Iteration {iteration}: {load_type} load for {duration}s ({cpu_workers} workers)")
                    
                    # Use stress-ng to create CPU load
                    cmd = f"timeout {duration}s stress-ng --cpu {cpu_workers} --cpu-load 85"
                    subprocess.run(cmd, shell=True, capture_output=True)
                    
                    # Show CPU stats
                    try:
                        cpu_percent = psutil.cpu_percent(interval=1)
                        memory_info = psutil.virtual_memory()
                        print(f"üìä CPU: {cpu_percent:.1f}% util, Memory: {memory_info.percent:.1f}% ({memory_info.used//1024//1024}MB/{memory_info.total//1024//1024}MB)")
                    except:
                        print("üìä System stats unavailable")
                    
                    # Brief pause between iterations
                    time.sleep(random.randint(2, 5))
                    
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è  Error in iteration {iteration}: {e}")
                    time.sleep(5)
            
            print("‚úÖ Workload simulation completed")
            EOF
            
            # Run the CPU load simulator
            python3 /tmp/cpu_load.py
        
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "2000m"
            memory: "1Gi"
        
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CPU_LIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu

---
# HorizontalPodAutoscaler for demonstration
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cpu-workload-simulator-hpa
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cpu-workload-simulator
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
